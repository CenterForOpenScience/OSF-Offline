; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "OSF Sync"
#define MyAppVersion "0.4.3"
#define MyAppPublisher "Center for Open Science"
#define MyAppURL "http://osf.io/"
#define MyAppExeName "OSF Sync.exe"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{40DD3C72-2935-4458-92FC-D1E23BD0E8AD}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={pf}\{#MyAppName}
DefaultGroupName={#MyAppName}
DisableProgramGroupPage=true
DisableStartupPrompt=true
LicenseFile=C:\Users\IEUser\Documents\GitHub\OSF-Offline\LICENSE
OutputDir=C:\Users\IEUser\Desktop
OutputBaseFilename="OSF Sync installer"
SetupIconFile=C:\Users\IEUser\Documents\GitHub\OSF-Offline\deploy\images\cos_logo.ico
Compression=lzma
SolidCompression=yes

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked
Name: "quicklaunchicon"; Description: "{cm:CreateQuickLaunchIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked; OnlyBelowVersion: 0,6.1

[Files]
; DLL used to check if the target program is running at install time
Source: "C:\Users\IEUser\Documents\GitHub\OSF-Offline\deploy\psvince.dll"; flags: dontcopy
; psvince is installed in {app} folder, so it will be loaded at 
; uninstall time to check if the target program is running
Source: "C:\Users\IEUser\Documents\GitHub\OSF-Offline\deploy\psvince.dll"; DestDir: {app}

Source: "C:\Users\IEUser\Documents\GitHub\OSF-Offline\dist\OSF Sync.exe"; DestDir: "{app}";
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{group}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{group}\{cm:UninstallProgram,{#MyAppName}}"; Filename: "{uninstallexe}"
Name: "{commondesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon
Name: "{userappdata}\Microsoft\Internet Explorer\Quick Launch\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: quicklaunchicon

[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent

;-------------------------------------------------------------------------------

[Code]

////////// Customize the following constants to suit your own program //////////

const

// Name of the application that should be closed and name of its executable

  ProgramName = 'OSF Sync';
  ProgramExeName = 'OSF Sync.exe';

// Messages user will see if the application is running.  
// (It may be a good idea to give instructions on HOW to close your application,
// if it's not obvious to the user (e.g., in the case of background applications)

  ProgramRunningOnInstallMessage = ProgramName + ' is currently running. ' + #13 + #13 +
      'Please close it and then click on ''Retry'' to proceed with the installation.';
  InstallationCanceledMessage = 'The installation was canceled.';

  ProgramRunningOnUninstallMessage = ProgramName + ' is currently running. ' + #13 + #13 +
      'Please close it and then click on ''Retry'' to proceed.';
  UninstallationCanceledMessage = 'The uninstallation process was canceled.';

////////////////////// end of basic-customization section //////////////////////

//------------------------------------------------------------------------------

// IsModuleLoadedI - function to call at install time
// Also added setuponly flag
function IsModuleLoadedI(modulename: String ):  Boolean;
external 'IsModuleLoaded@files:psvince.dll stdcall setuponly';

// IsModuleLoadedU - function to call at uninstall time
// Also added uninstallonly flag
function IsModuleLoadedU(modulename: String ):  Boolean;
external 'IsModuleLoaded@{app}\psvince.dll stdcall uninstallonly' ;

//------------------------------------------------------------------------------

// Calls IsModuleLoadedI or IsModuleLoadedU as appropriate

function IsModuleLoaded( modulename: String; isUninstallation: Boolean ): Boolean;
begin
  if isUninstallation then
    Result := IsModuleLoadedU( modulename )
  else
    Result := IsModuleLoadedI( modulename );
end;

//------------------------------------------------------------------------------

// Prompt the user to close a program that's still running.
// Finish when the executable is closed or the user cancels the process.

//  -> message : A message to show the user to prompt them to close 
//  -> isUninstallation : Whether this is an uninstallation (to call the right function.)
// <-  True if the program was closed (or was not running),
//     False if the user clicked on the Cancel button and didn't close the program

function PromptUntilProgramClosedOrInstallationCanceled( 
              message: String; 
              isUninstallation: Boolean ): Boolean;
var
  ButtonPressed : Integer;
begin
  ButtonPressed := IDRETRY;

  // Check if the program is running or if the user has pressed the cancel button
  while IsModuleLoaded( ProgramExeName, isUninstallation ) and ( ButtonPressed <> IDCANCEL ) do
  begin
    ButtonPressed := MsgBox( message , mbError, MB_RETRYCANCEL );    
  end;

  // Has the program been closed?
  Result := Not IsModuleLoaded( ProgramExeName, isUninstallation );
end;

//------------------------------------------------------------------------------

function InitializeSetup(): Boolean;
begin
  Result := PromptUntilProgramClosedOrInstallationCanceled( ProgramRunningOnInstallMessage, False );

  if Not Result then
  begin
    MsgBox( InstallationCanceledMessage, mbInformation, MB_OK );
  end;
end;

//------------------------------------------------------------------------------

function InitializeUninstall(): Boolean;
begin
  Result := PromptUntilProgramClosedOrInstallationCanceled( ProgramRunningOnUninstallMessage, True );

  // Unload the DLL, otherwise the dll psvince is not deleted
  UnloadDLL(ExpandConstant('{app}\psvince.dll'));

  if not Result then
  begin
    MsgBox( UninstallationCanceledMessage, mbInformation, MB_OK );
  end;  
end;

//------------------------------------------------------------------------------

// Copyright (C) 2011 by Andres Cabezas Ulate ( andres.cabezas@domador.net )

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

//------------------------------------------------------------------------------
